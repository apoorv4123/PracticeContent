// Leetcode 19
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        ListNode first = dummy, second = first;
        for(int i = 0; i<n;i++){
            first = first.next;
        }
        
        while(first.next != null){
            first = first.next;
            second = second.next;
        }
        
        second.next = second.next.next;
        return dummy.next;
    }
}

// Leetcode 876
    public ListNode middleNode(ListNode head) {
        
        ListNode slow = head, fast = head;
        
        while(fast != null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return slow;
    }

// Leetcode 24
class Solution {
    public ListNode swapPairs(ListNode head) {
        
        if(head == null){
            return null;
        }
        
        ListNode temp = head.next;
        if(temp == null){
            return head;
        }        
        temp = temp.next;
        
        ListNode prev = swapPairs(temp);
        
        ListNode curr = head;
        ListNode ahead = curr.next;
        
        curr.next = prev;
        ahead.next = curr;
        
        return ahead;
    }
}

// Leetcode 25
    class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        if(head == null){
            return null;
        }
        
        ListNode temp = head;
        for(int i = 1; i<=k && temp != null; i++){
            temp = temp.next;
        }
        
        ListNode prev = reverseKGroup(temp,k);
        ListNode curr = head;
        
        while(curr != temp){
            ListNode ahead = curr.next;
            curr.next = prev;
            prev = curr;
            curr = ahead;
        }
        return prev;
    }
}

// Leetcode 82
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
        if(head == null || head.next == null){
            return head;
        }
        
        ListNode result = new ListNode(-101), tt = result;
        // result.next = head;
        ListNode temp = head;
        while(temp != null){
            ListNode t = temp;
            int count = 1;
            while(t!=null && t.next != null && t.val == t.next.val){
                count++;
                t = t.next;
            }
            if(count != 1){
                temp = t.next;
                continue;
            }else{
                tt.next = new ListNode(temp.val);
                tt = tt.next;
            }
            temp = temp.next;
        }
        return result.next;
    }
}

// Leetcode 83
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        
        if(head == null || head.next == null){
            return head;
        }
        
        ListNode result = new ListNode(-101), temp = head, t1 = result;
        while(temp != null){
            if(temp.val != t1.val){
                t1.next = new ListNode(temp.val);
                t1 = t1.next;
            }
            temp = temp.next;
        }
        return result.next;
    }
}

// Leetcode 203
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        
        if(head == null){
            return head;
        }
        
        ListNode dummy = new ListNode(0), tt = dummy, temp = head;
        
        while(temp != null){
            if(temp.val != val){
                tt.next = temp;
                tt = tt.next;
            }
            temp = temp.next;
        }
        tt.next = null;
        return dummy.next;
    
    }
}

// Leetcode 206
class Solution {
    public ListNode reverseList(ListNode head) {   
        if(head == null || head.next == null){
            return head;
        }
        return rlIterative(head);
    }
    public ListNode rlRecursive(ListNode ){        
    }
    
    public ListNode rlIterative(ListNode head){
        ListNode prev = head, curr = prev.next, ahead = null;
        
        while(curr != null){
            ahead = curr.next;
            curr.next = prev;
            prev = curr;
            curr = ahead;
        }
        head.next = null;
        return prev;
    }
}

// Leetcode 234
class Solution {
    public boolean isPalindrome(ListNode head) {
        
        if(head == null || head.next == null){
            return true;
        }
        
        int len = 0;
        ListNode temp = head;
        while(temp != null){
            len++;
            temp = temp.next;
        }
        return isPalindrome(new heapmover(head),head,1,len);
    }
    
    class heapmover{
        ListNode left;
        public heapmover(ListNode node){
            left = node;
        }
    }
    
    public boolean isPalindrome(heapmover mover, ListNode right, int count, int len){
        
        if(right == null){
            return true;
        }
        
        boolean rr = isPalindrome(mover, right.next, count+1, len);
        boolean res = true && rr;
        
        if(res && count > (len >> 1)){
            res = res && (mover.left.val == right.val);
            mover.left = mover.left.next;
        }
        return res;
    }
}
