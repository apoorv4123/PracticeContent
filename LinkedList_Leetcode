// Leetcode 19
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        ListNode first = dummy, second = first;
        for(int i = 0; i<n;i++){
            first = first.next;
        }
        
        while(first.next != null){
            first = first.next;
            second = second.next;
        }
        
        second.next = second.next.next;
        return dummy.next;
    }
}

// Leetcode 876
    public ListNode middleNode(ListNode head) {
        
        ListNode slow = head, fast = head;
        
        while(fast != null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return slow;
    }

// Leetcode 24
class Solution {
    public ListNode swapPairs(ListNode head) {
        
        if(head == null){
            return null;
        }
        
        ListNode temp = head.next;
        if(temp == null){
            return head;
        }        
        temp = temp.next;
        
        ListNode prev = swapPairs(temp);
        
        ListNode curr = head;
        ListNode ahead = curr.next;
        
        curr.next = prev;
        ahead.next = curr;
        
        return ahead;
    }
}

// Leetcode 25
    class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        if(head == null){
            return null;
        }
        
        ListNode temp = head;
        for(int i = 1; i<=k && temp != null; i++){
            temp = temp.next;
        }
        
        ListNode prev = reverseKGroup(temp,k);
        ListNode curr = head;
        
        while(curr != temp){
            ListNode ahead = curr.next;
            curr.next = prev;
            prev = curr;
            curr = ahead;
        }
        return prev;
    }
}
