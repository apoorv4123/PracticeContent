class Solution {
    
    class Pair implements Comparable<Pair> {
		int frequency;
		int value;

		Pair(int frequency, int value) {
			this.frequency = frequency;
			this.value = value;
		}

		@Override
		public int compareTo(Pair o) {
			return this.frequency < o.frequency ? -1 : +1;
		}
	}
    
	public int[] topKFrequent(int[] nums, int k) {

// Hashmap stores Frequency->Value pair
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

		for (int num : nums) {
			map.put(num, map.getOrDefault(num, 0) + 1);
		}

// Mminheap
		PriorityQueue<Pair> heap = new PriorityQueue<>();

		for (Integer key : map.keySet()) {
			heap.add(new Pair(map.get(key), key));

			if (heap.size() > k) {
				heap.poll();
			}
		}

		ArrayList<Integer> al = new ArrayList<>();
		while (!heap.isEmpty()) {
			al.add(heap.poll().value);
		}

		int[] arr = new int[al.size()];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = al.get(i);
		}
		return arr;
	}
}

//Leetcode_378
public static int kthSmallest(int[][] matrix, int k) {
		
		PriorityQueue<Integer> heap = new PriorityQueue<Integer>(Collections.reverseOrder());
		
		for (int i = 0; i < matrix.length; i++) {
			for (int j = 0; j < matrix[0].length; j++) {
				heap.offer(matrix[i][j]);
				
				if(heap.size() > k) {
					heap.poll();
				}
				
			}
		}
		return heap.remove();
	}
	
//Leetcode_373
class Pair implements Comparable<Pair> {
		int sum;
		int num1;
		int num2;

		public Pair(int num1, int num2) {
			this.sum = num1 + num2;
			this.num1 = num1;
			this.num2 = num2;
		}

		@Override
		public int compareTo(Pair o) {
			return this.sum < o.sum ? -1 : +1;
		}

	}

	public static List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {

		Leetcode_373 l = new Leetcode_373();

		List<List<Integer>> resultList = new ArrayList<List<Integer>>();

		PriorityQueue<Pair> heap = new PriorityQueue<>(Collections.reverseOrder());

		for (int i = 0; i < nums1.length; i++) {
			for (int j = 0; j < nums2.length; j++) {
				heap.offer(l.new Pair(nums1[i], nums2[j]));

				if (heap.size() > k) {
					heap.poll();
				}

			}
		}

		List<Integer> list;
		while (!heap.isEmpty()) {
			list = new ArrayList<Integer>();
			Pair rp = heap.poll();
			list.add(rp.num1);
			list.add(rp.num2);
			resultList.add(list);
		}

		return resultList;
	}
