// Leetcode 136
class Solution {
    public int singleNumber(int[] nums) {
        
        int res = 0;
        for(int i = 0; i < nums.length; i++){
            res = res ^ nums[i];
        }
        return res;
    }
}

// Leetcode 784
class Solution {
    
	public List<String> letterCasePermutation(String str) {

		List<String> list = new ArrayList<String>();
		letterCasePermutation(str, "", list);
		return list;

	}

	public static void letterCasePermutation(String str, String ans, List<String> list) {

		if (str.length() == 0) {
			list.add(ans);
			return;
		}

		char ch = str.charAt(0);
		String ros = str.substring(1);

		if (ch >= 'a' && ch <= 'z') {

			// not replace
			letterCasePermutation(ros, ans + ch, list);

			// replace
			letterCasePermutation(ros, ans + (char) ((int) ch - 32), list);

		} else if (ch >= 'A' && ch <= 'Z') {

			// not replace
			letterCasePermutation(ros, ans + ch, list);

			// replace
			letterCasePermutation(ros, ans + (char) ((int) ch + 32), list);

		} else {

			letterCasePermutation(ros, ans + ch, list);

		}

	}

}

// Leetcode 1239
class Solution {
    public int maxLength(List<String> arr) {
        maxLength(arr,0,"");
        return mlen;
    }
    int mlen = Integer.MIN_VALUE;

	public void maxLength(List<String> arr, int vidx, String ans) {

		if (vidx == arr.size()) {
			if (ans.length() > mlen)
				mlen = ans.length();
			return;
		}

        if(!freqarr(ans+arr.get(vidx)))
		maxLength(arr, vidx + 1, ans + arr.get(vidx));
		maxLength(arr, vidx + 1, ans);

	}

	public boolean freqarr(String str) {

		int[] freq = new int[26];
		for (int i = 0; i < str.length(); i++) {
			char ch = str.charAt(i);
			freq[ch - 'a']++;
		}

		for (int i = 0; i < freq.length; i++) {
			if (freq[i] > 1) {
				return true;
			}
		}
		return false;
	}
}

// Leetcode 1290
class Solution {
    public int getDecimalValue(ListNode head) {
        
        int len = 0;
        ListNode temp = head;
        while(temp != null){
            temp = temp.next;
            len++;
        }
        
        int ans = 0;
        
        temp = head;
        while(temp != null){
            ans += temp.val * (int)Math.pow(2,--len);
            temp = temp.next;
        }
        return ans;
    }
}
